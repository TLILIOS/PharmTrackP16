rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Fonction pour vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Fonction pour vérifier si l'utilisateur est le propriétaire de la ressource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Fonction pour valider les données d'un médicament
    function isValidMedicine() {
      return request.resource.data.keys().hasAll(['name', 'unit', 'currentQuantity', 'maxQuantity', 
        'warningThreshold', 'criticalThreshold', 'aisleId', 'userId', 'createdAt', 'updatedAt']) &&
        request.resource.data.name is string && request.resource.data.name.size() > 0 &&
        request.resource.data.unit is string && request.resource.data.unit.size() > 0 &&
        request.resource.data.currentQuantity is number && request.resource.data.currentQuantity >= 0 &&
        request.resource.data.maxQuantity is number && request.resource.data.maxQuantity > 0 &&
        request.resource.data.warningThreshold is number && request.resource.data.warningThreshold >= 0 &&
        request.resource.data.criticalThreshold is number && request.resource.data.criticalThreshold >= 0 &&
        request.resource.data.currentQuantity <= request.resource.data.maxQuantity &&
        request.resource.data.criticalThreshold <= request.resource.data.warningThreshold &&
        request.resource.data.warningThreshold <= request.resource.data.maxQuantity;
    }
    
    // Fonction pour valider les données d'un rayon
    function isValidAisle() {
      return request.resource.data.keys().hasAll(['name', 'colorHex', 'icon', 'userId']) &&
        request.resource.data.name is string && request.resource.data.name.size() > 0 &&
        request.resource.data.colorHex is string && request.resource.data.colorHex.matches('^#[0-9A-Fa-f]{6}$') &&
        request.resource.data.icon is string && request.resource.data.icon.size() > 0;
    }
    
    // Fonction pour valider les données d'historique
    function isValidHistory() {
      return request.resource.data.keys().hasAll(['medicineId', 'userId', 'action', 'details', 'timestamp']) &&
        request.resource.data.medicineId is string && request.resource.data.medicineId.size() > 0 &&
        request.resource.data.action is string && request.resource.data.action.size() > 0 &&
        request.resource.data.details is string && request.resource.data.details.size() > 0 &&
        request.resource.data.timestamp is timestamp;
    }
    
    // Règles pour les médicaments
    match /medicines/{medicineId} {
      // Lecture : seul le propriétaire peut lire ses médicaments
      allow read: if isOwner(resource.data.userId);
      
      // Création : utilisateur authentifié avec données valides
      allow create: if isAuthenticated() && 
        isValidMedicine() &&
        request.resource.data.userId == request.auth.uid;
      
      // Mise à jour : seul le propriétaire avec données valides
      allow update: if isOwner(resource.data.userId) && 
        isValidMedicine() &&
        request.resource.data.userId == resource.data.userId; // Empêcher le changement de propriétaire
      
      // Suppression : seul le propriétaire
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Règles pour les rayons
    match /aisles/{aisleId} {
      // Lecture : seul le propriétaire peut lire ses rayons
      allow read: if isOwner(resource.data.userId);
      
      // Création : utilisateur authentifié avec données valides
      allow create: if isAuthenticated() && 
        isValidAisle() &&
        request.resource.data.userId == request.auth.uid;
      
      // Mise à jour : seul le propriétaire avec données valides
      allow update: if isOwner(resource.data.userId) && 
        isValidAisle() &&
        request.resource.data.userId == resource.data.userId;
      
      // Suppression : seul le propriétaire sans médicaments associés
      allow delete: if isOwner(resource.data.userId) &&
        !exists(/databases/$(database)/documents/medicines/$(request.resource.data.medicineIds));
    }
    
    // Règles pour l'historique
    match /history/{historyId} {
      // Lecture : seul le propriétaire peut lire son historique
      allow read: if isOwner(resource.data.userId);
      
      // Création : utilisateur authentifié avec données valides
      allow create: if isAuthenticated() && 
        isValidHistory() &&
        request.resource.data.userId == request.auth.uid;
      
      // Mise à jour et suppression : interdites (l'historique est immuable)
      allow update, delete: if false;
    }
    
    // Règles pour les utilisateurs
    match /users/{userId} {
      // Lecture : seul l'utilisateur peut lire ses propres données
      allow read: if isOwner(userId);
      
      // Création : lors de l'inscription
      allow create: if isAuthenticated() && 
        request.auth.uid == userId &&
        request.resource.data.keys().hasAll(['email', 'createdAt']);
      
      // Mise à jour : seul l'utilisateur peut modifier ses données
      allow update: if isOwner(userId) &&
        request.resource.data.email == resource.data.email; // Empêcher le changement d'email
      
      // Suppression : interdite
      allow delete: if false;
    }
    
    // Règles pour les paramètres utilisateur
    match /userSettings/{userId} {
      // Lecture et écriture : seul l'utilisateur concerné
      allow read, write: if isOwner(userId);
    }
    
    // Rejeter toute autre requête
    match /{document=**} {
      allow read, write: if false;
    }
  }
}