import XCTest
@testable import MediStock

// MARK: - Tests d'analyse des fonctions d'ajout de rayon et m√©dicament

final class AddFunctionsAnalysisTests: XCTestCase {
    
    var dataService: DataService!
    var appState: AppState!
    
    override func setUp() async throws {
        try await super.setUp()
        dataService = DataService()
        appState = AppState()
    }
    
    override func tearDown() async throws {
        dataService = nil
        appState = nil
        try await super.tearDown()
    }
    
    // MARK: - Tests fonction saveAisle
    
    func testAnalyseSaveAisleFunctionValidation() {
        // Analyse de la fonction saveAisle dans DataService
        
        // PROBL√àMES IDENTIFI√âS:
        // 1. Aucune validation des param√®tres d'entr√©e
        // 2. Le nom du rayon peut √™tre vide
        // 3. La colorHex n'est pas valid√©e (format hexad√©cimal)
        // 4. L'ic√¥ne n'est pas valid√©e (SF Symbol existant)
        // 5. Pas de v√©rification d'unicit√© du nom
        
        // Test avec donn√©es invalides
        let invalidAisle1 = Aisle(id: "", name: "", description: nil, colorHex: "invalid", icon: "")
        let invalidAisle2 = Aisle(id: "", name: "Test", description: nil, colorHex: "#GGGGGG", icon: "invalid.icon")
        let invalidAisle3 = Aisle(id: "", name: "   ", description: nil, colorHex: "#FF0000", icon: "pills")
        
        // Ces cas devraient √™tre rejet√©s mais ne le sont pas actuellement
        print("‚ùå Probl√®me 1: Aucune validation du nom vide ou espaces uniquement")
        print("‚ùå Probl√®me 2: Aucune validation du format colorHex")
        print("‚ùå Probl√®me 3: Aucune validation de l'ic√¥ne SF Symbol")
    }
    
    func testAnalyseSaveAisleDataIntegrity() {
        // Analyse de l'int√©grit√© des donn√©es
        
        // PROBL√àMES IDENTIFI√âS:
        // 1. Pas de timestamps (createdAt, updatedAt) sur les rayons
        // 2. Pas de gestion de version optimiste
        // 3. Le userId est ajout√© manuellement apr√®s encoding
        // 4. Pas de validation m√©tier (ex: limite du nombre de rayons)
        
        print("‚ùå Probl√®me 4: Absence de timestamps pour l'audit")
        print("‚ùå Probl√®me 5: Risque de conflit en cas de modifications concurrentes")
        print("‚ùå Probl√®me 6: Limite m√©tier non impl√©ment√©e (nombre max de rayons)")
    }
    
    // MARK: - Tests fonction saveMedicine
    
    func testAnalyseSaveMedicineFunctionValidation() {
        // Analyse de la fonction saveMedicine dans DataService
        
        // PROBL√àMES IDENTIFI√âS:
        // 1. Aucune validation des seuils (warning > critical est accept√©)
        // 2. currentQuantity peut √™tre n√©gatif
        // 3. maxQuantity peut √™tre inf√©rieur √† currentQuantity
        // 4. Le nom peut √™tre vide ou contenir uniquement des espaces
        // 5. L'aisleId n'est pas v√©rifi√© (rayon existant)
        // 6. La date d'expiration peut √™tre dans le pass√©
        
        let invalidMedicine1 = Medicine(
            id: "",
            name: "",
            description: nil,
            dosage: nil,
            form: nil,
            reference: nil,
            unit: "bo√Æte",
            currentQuantity: -10,
            maxQuantity: 5,
            warningThreshold: 20,
            criticalThreshold: 50, // Plus √©lev√© que warning!
            expiryDate: Date().addingTimeInterval(-86400), // Hier
            aisleId: "non-existent",
            createdAt: Date(),
            updatedAt: Date()
        )
        
        print("‚ùå Probl√®me 7: Seuils incoh√©rents accept√©s (critical > warning)")
        print("‚ùå Probl√®me 8: Quantit√©s n√©gatives accept√©es")
        print("‚ùå Probl√®me 9: maxQuantity < currentQuantity accept√©")
        print("‚ùå Probl√®me 10: Date d'expiration pass√©e accept√©e")
        print("‚ùå Probl√®me 11: aisleId non v√©rifi√©")
    }
    
    func testAnalyseSaveMedicineCodeDuplication() {
        // Analyse de la duplication de code
        
        // PROBL√àME IDENTIFI√â:
        // Le code de cr√©ation et mise √† jour est dupliqu√©
        // Seules les dates diff√®rent, tout le reste est r√©p√©t√©
        
        print("‚ùå Probl√®me 12: Duplication massive de code entre cr√©ation et mise √† jour")
        print("   Solution: Utiliser medicine.copyWith() ou un builder pattern")
    }
    
    // MARK: - Tests d'interaction entre les fonctions
    
    func testAnalyseInteractionAisleMedicine() {
        // Analyse de l'interaction entre rayons et m√©dicaments
        
        // PROBL√àMES IDENTIFI√âS:
        // 1. Un m√©dicament peut r√©f√©rencer un rayon supprim√©
        // 2. Pas de cascade delete ou validation r√©f√©rentielle
        // 3. Pas de compteur de m√©dicaments par rayon
        // 4. Suppression d'un rayon ne met pas √† jour les m√©dicaments
        
        print("‚ùå Probl√®me 13: Int√©grit√© r√©f√©rentielle non garantie")
        print("‚ùå Probl√®me 14: Orphelins possibles apr√®s suppression de rayon")
    }
    
    // MARK: - Recommandations d'am√©lioration
    
    func testRecommandations() {
        print("\nüìã RECOMMANDATIONS D'AM√âLIORATION:\n")
        
        print("1. VALIDATION DES ENTR√âES:")
        print("   - Cr√©er des structures de validation d√©di√©es")
        print("   - Impl√©menter validate() sur les mod√®les")
        print("   - Rejeter les donn√©es invalides avant Firebase")
        
        print("\n2. INT√âGRIT√â DES DONN√âES:")
        print("   - Ajouter timestamps sur Aisle")
        print("   - Impl√©menter v√©rification d'unicit√©")
        print("   - Valider les r√©f√©rences crois√©es")
        
        print("\n3. OPTIMISATIONS:")
        print("   - R√©duire la duplication de code")
        print("   - Utiliser des transactions pour les op√©rations li√©es")
        print("   - Impl√©menter un cache local")
        
        print("\n4. GESTION D'ERREURS:")
        print("   - Cr√©er des erreurs m√©tier sp√©cifiques")
        print("   - Messages d'erreur localis√©s")
        print("   - Retry automatique en cas d'erreur r√©seau")
        
        print("\n5. S√âCURIT√â:")
        print("   - Validation c√¥t√© serveur avec Cloud Functions")
        print("   - R√®gles Firestore strictes")
        print("   - Audit trail complet")
    }
    
    // MARK: - Code corrig√© propos√©
    
    func testProposedValidationCode() {
        print("\nüîß CODE DE VALIDATION PROPOS√â:\n")
        
        let validationCode = """
        // Extension pour validation des mod√®les
        extension Aisle {
            func validate() throws {
                guard !name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
                    throw ValidationError.emptyName
                }
                
                guard colorHex.matches("#[0-9A-Fa-f]{6}") else {
                    throw ValidationError.invalidColorFormat
                }
                
                guard SFSymbol.isValid(icon) else {
                    throw ValidationError.invalidIcon
                }
            }
        }
        
        extension Medicine {
            func validate() throws {
                guard !name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
                    throw ValidationError.emptyName
                }
                
                guard currentQuantity >= 0 else {
                    throw ValidationError.negativeQuantity
                }
                
                guard maxQuantity >= currentQuantity else {
                    throw ValidationError.invalidMaxQuantity
                }
                
                guard criticalThreshold < warningThreshold else {
                    throw ValidationError.invalidThresholds
                }
                
                if let expiry = expiryDate, expiry < Date() {
                    throw ValidationError.expiredDate
                }
            }
        }
        
        // Service am√©lior√© avec validation
        func saveMedicineImproved(_ medicine: Medicine) async throws -> Medicine {
            // 1. Validation
            try medicine.validate()
            
            // 2. V√©rifier que le rayon existe
            let aisleExists = try await checkAisleExists(medicine.aisleId)
            guard aisleExists else {
                throw ValidationError.invalidAisleReference
            }
            
            // 3. √âviter la duplication avec copyWith
            var medicineToSave = medicine
            if medicine.id.isEmpty {
                medicineToSave = medicine.copyWith(
                    id: db.collection("medicines").document().documentID,
                    createdAt: Date(),
                    updatedAt: Date()
                )
            } else {
                medicineToSave = medicine.copyWith(updatedAt: Date())
            }
            
            // 4. Sauvegarder avec transaction pour garantir l'int√©grit√©
            return try await saveWithTransaction(medicineToSave)
        }
        """
        
        print(validationCode)
    }
}

// MARK: - Erreurs de validation propos√©es

// ValidationError est maintenant d√©fini dans Models/ValidationError.swift
// Cette red√©claration locale a √©t√© supprim√©e pour √©viter les conflits